<?xml version="1.0" encoding="UTF-8"?>
<!-- Mutu configuration file -->
<mutu-config>
<!-- Common prefix map simplifies SPARQL queries so that the same prefixes need not to be repeated in every query -->
<common-prefix-map>
<![CDATA[
PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>
PREFIX skos: <http://www.w3.org/2004/02/skos/core#>
PREFIX skosext: <http://purl.org/finnonto/schema/skosext#>
PREFIX dc11: <http://purl.org/dc/elements/1.1/>
PREFIX owl: <http://www.w3.org/2002/07/owl#>
PREFIX ysometa: <http://www.yso.fi/onto/yso-meta/>
PREFIX yso-meta: <http://www.yso.fi/onto/yso-meta/2007-03-02/>
]]>
</common-prefix-map>
<!-- Substitutions are basic search and replace operations that can be used like macros to share certain configurations in multiple queries -->
<substitutions>
<task>
<description>Selects the domain concepts (?domainC) by type, their rdfs:type's (?domainCtypes), and finnish prefLabel (?domainCpref)</description>
<search>*domain-concept-selector-query*</search>
<replace>
<![CDATA[
SELECT ?domainC (REPLACE(GROUP_CONCAT(?domainCtype ; separator=", "),'http://([^,]+?)/([^/]+?)-meta/','$2-meta:') AS ?domainCtypes) ?domainCpref
WHERE {
?domainC rdf:type ?domainCtype . 
?domainCtype rdf:type owl:Class .
FILTER (!strstarts(str(?domainCtype),"http://www.yso.fi/onto/yso") &&
              !strstarts(str(?domainCtype),"http://www.w3.org/2002/07/owl")) .
?domainC skos:prefLabel ?domainCpref .
FILTER (lang(?domainCpref) = '*lang*')
} GROUP BY ?domainC ?domainCpref
]]>
</replace>
</task>
<task>
<description>Selects the YSO concepts (?domainC) by type, their rdfs:type's (?domainCtypes), and finnish prefLabel (?domainCpref)</description>
<search>*yso-concept-selector-query*</search>
<replace>
<![CDATA[
SELECT ?ysoC (REPLACE(REPLACE(GROUP_CONCAT(?ysoCtype ; separator=", "),'http://([^,]+?)/([^/]+?)-meta/','$2-meta:'),'2007-03-02/','') AS ?ysoCtypes) ?ysoCpref
WHERE {
?ysoC rdf:type ?ysoCtype . 
?ysoCtype rdf:type owl:Class .
FILTER (strstarts(str(?ysoCtype),"http://www.yso.fi/onto/yso")) .
?ysoC skos:prefLabel ?ysoCpref .
FILTER (lang(?ysoCpref) = '*lang*')
} GROUP BY ?ysoC ?ysoCpref
]]>
</replace>
</task>
<task>
<description>Counts the number of domainC subClasses that are not themselves directly connected to the same YSO sub hierachy and thus not on list on changed concepts for the current change.</description>
<search>*count-domainC-subClasses-as-nroSubConcepts*</search>
<replace>
<![CDATA[
OPTIONAL{
  SELECT  ?domainC (COUNT(*) AS ?nroSubConcepts)
  WHERE{
    ?subConcept skos:broader+ ?domainC .
    FILTER NOT EXISTS {
      ?subConcept skos:broader|skos:exactMatch ?someYsoC .
      ?someYsoC rdf:type ?someYsoCType .
      ?someYsoCType rdf:type owl:Class .
      FILTER (strstarts(str(?someYsoCType),"http://www.yso.fi/onto/yso")) .
      ?domainC skos:broader|skos:exactMatch ?commonYsoC .
      ?commonYsoC rdf:type ?commonYsoCType .
      ?commonYsoCType rdf:type owl:Class .
      FILTER (strstarts(str(?commonYsoCType),"http://www.yso.fi/onto/yso")) .
      ?someYsoC skos:broader+ ?commonYsoC
    }
  } GROUP BY ?domainC
}
]]>
</replace>
</task>
<task>
<description>Set label language (override by command line switch)</description>
<note>Must be last (to replace in replacements) !!</note>
<search>*lang*</search>
<replace>fi</replace>
</task>
</substitutions>
<!-- Queries are the heart of Mutu. All queries search for different types of changes, but report the changes in a common format.
?queryType ?domainC ?domainCtypes ?domainCpref ?relationType ?interface ?ysoC ?ysoCtypes ?ysoCpref ?changeDescription
Every query must contain one description an one query. Developer remarks can be included with remk-elements or #-syntax in SPARQL.
-->
<query>
<description>Finds new YSO concepts that have same prefLabel with a domain ontology concept </description>
<sparql><![CDATA[
# 1-same-pref.rq
#prefLabel same
SELECT DISTINCT ('1' AS ?queryType) ('1' AS ?querySubType) ?domainC ?nroSubConcepts ?domainCtypes ?domainCpref ?relationType ?interface ?ysoC ?ysoCtypes ?ysoCpref ?changeDescription 
WHERE {
  GRAPH ?anyNamedGraph {
    {*yso-concept-selector-query*} .
    FILTER NOT EXISTS {{?ysoC owl:deprecated true . } UNION 
                       {?ysoC rdf:type ysometa:StructuringClass} UNION 
                       {?ysoC rdf:type yso-meta:StructuringClass}  
                       } . 
  }
  # Include only YSO Concepts that exists in the old YSO
  FILTER NOT EXISTS { ?ysoC rdf:type ?anyTypeX } .
  ?domainC skos:prefLabel ?ysoCpref .
  {*domain-concept-selector-query*}.
  BIND( "" AS ?interface)
  BIND(concat("Uudella YSO käsitteellä '",?ysoCpref, "' (yso:",substr(str(?ysoC),28) ,") on sama prefLabel kuin erikoisontologian käsitteellä") AS ?changeDescription)
  
  *count-domainC-subClasses-as-nroSubConcepts*
  BIND ("Ei suhdetta" AS ?relationType)
  
} ORDER BY ?domainC
]]></sparql>
</query>

<query>
<description>Finds domain concepts which have the same prefLabel as the new prefLabel of an existing YSO-concept, and there is no equivalence</description>
<note>To reduce duplicate results, this query returns only domain ontology concepts which are directly connected to YSO. Remember to check their the sub concepts!!.</note>
<sparql><![CDATA[
# 2-diff-broad-pref.rq
SELECT DISTINCT ('2' AS ?queryType) ('1' AS ?querySubType)  ?domainC ?nroSubConcepts ?domainCtypes ?domainCpref ?relationType ?interface ?ysoC ?ysoCtypes ?ysoCpref ?changeDescription 
WHERE {
   
  GRAPH ?anyNamedGraph {
    ?ysoC skos:prefLabel ?ysoCnewPref .
    FILTER(lang(?ysoCnewPref) = '*lang*') .
    #FILTER NOT EXISTS {?ysoC skos:prefLabel ?ysoCpref} .
    FILTER NOT EXISTS {{?ysoC owl:deprecated true . } UNION 
                       {?ysoC rdf:type ysometa:StructuringClass} UNION 
                       {?ysoC rdf:type yso-meta:StructuringClass} } . 
                    }
  {*yso-concept-selector-query*}
  FILTER(?ysoCnewPref != ?ysoCpref) .
  FILTER NOT EXISTS { GRAPH ?yso {{?ysoC owl:deprecated true . } UNION 
                                  {?ysoC rdf:type ysometa:StructuringClass} UNION 
                                  {?ysoC rdf:type yso-meta:StructuringClass}} . 
                    }
  ?domainC skos:prefLabel ?ysoCnewPref
  {*domain-concept-selector-query*}
  FILTER NOT EXISTS { ?domainC skos:exactMatch ?ysoC } . 
  BIND( "" AS ?interface)
  BIND(concat("'",?ysoCpref, "' (yso:",substr(str(?ysoC),28) ,") käsitteen uusi prefLabel on sama kuin erikoisontologian käsitteellä") AS ?changeDescription) .
  
  *count-domainC-subClasses-as-nroSubConcepts*
  BIND ("Ei suhdetta" AS ?relationType)
} ORDER BY ?domainC
]]></sparql>
</query>

<query>
<description>Finds domain concepts for which the prefLabel of equivalent or superordinate* YSO concept has changed</description>
<note>To reduce duplicate results, this query returns only domain ontology concepts which are directly connected to YSO. Remember to check their the sub concepts!!.</note>
<sparql><![CDATA[
# 2-diff-broad-pref.rq
SELECT DISTINCT ('2' AS ?queryType) ('2' AS ?querySubType)  ?domainC ?nroSubConcepts ?domainCtypes ?domainCpref ?relationType ?interface ?ysoC ?ysoCtypes ?ysoCpref ?changeDescription 
WHERE {
  {*domain-concept-selector-query*}
  ?domainC skos:broader|skos:exactMatch|skos:exactMatch/skos:broader ?ysoCinterface .
  ?ysoCinterface rdf:type ?ysoCinterfaceType .
  {?ysoCinterfaceType rdf:type owl:Class .
  FILTER (strstarts(str(?ysoCinterfaceType),"http://www.yso.fi/onto/yso")) .}
  ?ysoCinterface skos:broader* ?ysoC .
  
  # do not report twice if concept is connected multiple ways, only direct change
  FILTER NOT EXISTS {?domainC skos:broader ?ysoC .
                     ?domainC skos:exactMatch ?ysoCinterface .
                     ?ysoCinterface skos:broader ?ysoC}
  
  {*yso-concept-selector-query*} 
  GRAPH ?anyNamedGraph {
    ?ysoC skos:prefLabel ?ysoCnewPref .
    FILTER(lang(?ysoCnewPref) = '*lang*') .
    #FILTER NOT EXISTS {?ysoC skos:prefLabel ?ysoCpref} .
    FILTER NOT EXISTS {{?ysoC owl:deprecated true . } UNION 
                       {?ysoC rdf:type ysometa:StructuringClass} UNION
                       {?ysoC rdf:type yso-meta:StructuringClass} } . 
  }
  FILTER(?ysoCnewPref != ?ysoCpref) .
  FILTER NOT EXISTS { GRAPH ?yso {{?ysoC owl:deprecated true . } UNION
                                  {?ysoC rdf:type ysometa:StructuringClass} UNION
                                  {?ysoC rdf:type yso-meta:StructuringClass} }
                    }. 

  OPTIONAL {?domainC ?directRelation ?ysoC} .
  BIND (IF(?ysoCinterface = ?ysoC, "kyllä" ,"ei") AS ?interface)
  BIND (IF(?ysoCinterface != ?ysoC, 
            "skos:broader+" ,
            IF(?directRelation = skos:broader ,
               "skos:broader",
               IF(?directRelation = skos:exactMatch,
                  "skos:exactMatch",
                  "skos:exactMatch/skos:broader" # Because ysoC is ysoCInterface, but ?directRelation is not skos:broader or skos:exactMatch
                  )
              )
          ) 
	   AS ?relationType).
  BIND(concat("'",?ysoCpref, "' (yso:",substr(str(?ysoC),28) ,") käsitteen prefLabel on muuttunut -> '",?ysoCnewPref,"'") AS ?changeDescription) .
  
  *count-domainC-subClasses-as-nroSubConcepts*
  
} ORDER BY ?domainC
]]></sparql>
</query>

<query>
<description>Finds domain concepts for which indirect superordinate* concept of the direct superordinate/equivalent YSO concept has changed (new, removed or deprecated)</description>
<note>remember to check the subClasses of the domain concept, which are not directly connected to YSO themselves </note>
<sparql><![CDATA[
#  	3-diff-broader.rq
SELECT DISTINCT ?queryType ?querySubType ?domainC ?nroSubConcepts ?domainCtypes ?domainCpref ?relationType ?interface ?ysoC ?ysoCtypes ?ysoCpref ?changeDescription 
WHERE{
{
SELECT DISTINCT ('3' AS ?queryType) ('1' AS ?querySubType)  ?domainC ?domainCtypes ?domainCpref ?relationType ?interface ?ysoC ?ysoCtypes ?ysoCpref ?changeDescription 
WHERE {
  {*domain-concept-selector-query*}
  ?domainC skos:broader|skos:exactMatch ?ysoCinterface .
  ?ysoCinterface rdf:type ?ysoCinterfaceType .
  {?ysoCinterfaceType rdf:type owl:Class .
  FILTER (strstarts(str(?ysoCinterfaceType),"http://www.yso.fi/onto/yso")) .}
  
  GRAPH ?anyNamedGraph {
    ?ysoCinterface skos:broader* ?ysoC .
    
    ?ysoC skos:broader ?ysoC2 .
    ?ysoC2 skos:prefLabel ?ysoC2pref .
    FILTER(lang(?ysoC2pref) = '*lang*')
  }
  ?ysoCinterface skos:broader* ?ysoC .
  
  # do not report twice if concept is connected multiple ways, only direct change
  FILTER NOT EXISTS {?domainC skos:broader ?ysoC .
	                 ?domainC skos:exactMatch ?ysoCinterface .
                     ?ysoCinterface skos:broader ?ysoC} 
  
  FILTER NOT EXISTS { ?ysoCinterface skos:broader* ?ysoC .
                      ?ysoC skos:broader ?ysoC2 } 
  
  {*yso-concept-selector-query*} .
  
  # Do not report changes concerning StructuringClasses
  FILTER NOT EXISTS { GRAPH ?yso { {?ysoC rdf:type ysometa:StructuringClass} UNION {?ysoC rdf:type yso-meta:StructuringClass} } } .
  FILTER NOT EXISTS { GRAPH ?yso { {?ysoC2 rdf:type ysometa:StructuringClass} UNION {?ysoC2 rdf:type yso-meta:StructuringClass} } } .
  # Do not report if ysoC or ysoC2 is deprecated in future YSO, there is specific query for this change type
  FILTER NOT EXISTS { GRAPH ?yso { ?ysoC owl:deprecated true }} .
  FILTER NOT EXISTS { GRAPH ?yso { ?ysoC2 owl:deprecated true }} .

  OPTIONAL {?domainC ?directRelation ?ysoC} .
  BIND (IF(?ysoCinterface = ?ysoC, "kyllä" ,"ei") AS ?interface)
  BIND (IF(?ysoCinterface != ?ysoC, 
            "skos:broader+" ,
            IF(?directRelation = skos:broader ,
               "skos:broader",
               IF(?directRelation = skos:exactMatch,
                  "skos:exactMatch",
                  "skos:exactMatch/skos:broader" # Because ysoC is ysoCInterface, but ?directRelation is not skos:broader or skos:exactMatch
                  )
              )
          ) 
	   AS ?relationType).
  
  BIND(concat("'",?ysoCpref, "' (yso:",substr(str(?ysoC),28) ,") käsitteellä on uusi yläkäsite  '",?ysoC2pref,"' (yso:",substr(str(?ysoC2),28) ,")") AS ?changeDescription)
}
  
} UNION {

{
SELECT DISTINCT ('3' AS ?queryType) ('2' AS ?querySubType)  ?domainC ?domainCtypes ?domainCpref ?relationType ?interface ?ysoC ?ysoCtypes ?ysoCpref ?changeDescription 
WHERE {
  {*domain-concept-selector-query*}
  
  # ?ysoCinterface YSO Concept that is derectly connected to domain ontology (ie. equivalent or direct parent)
  ?domainC skos:broader|skos:exactMatch ?ysoCinterface .
  ?ysoCinterface rdf:type ?ysoCinterfaceType .
  ?ysoCinterfaceType rdf:type owl:Class .
  FILTER (strstarts(str(?ysoCinterfaceType),"http://www.yso.fi/onto/yso")) .

  {?ysoCinterface skos:broader* ?ysoC .
  ?ysoC skos:broader ?ysoC2 .}
  
  # do not report twice if concept is connected multiple ways, only direct change
  FILTER NOT EXISTS {?domainC skos:broader ?ysoC .
	                 ?domainC skos:exactMatch ?ysoCinterface .
                     ?ysoCinterface skos:broader ?ysoC} 
  
  FILTER NOT EXISTS { GRAPH ?yso { ?ysoC skos:broader ?ysoC2 } }
  
  {*yso-concept-selector-query*} 
  
  {?ysoC2 skos:prefLabel ?ysoC2pref .
  FILTER(lang(?ysoC2pref) = '*lang*')}
  
  # Do not report changes concerning StructuringClasses
  FILTER NOT EXISTS { {?ysoC rdf:type ysometa:StructuringClass} UNION {?ysoC rdf:type yso-meta:StructuringClass} } .
  FILTER NOT EXISTS { {?ysoC2 rdf:type ysometa:StructuringClass} UNION {?ysoC2 rdf:type yso-meta:StructuringClass} } .
  # Do not report if ysoC or ysoC2 is deprecated in future YSO, there is specific query for this change type
  FILTER NOT EXISTS { GRAPH ?yso { ?ysoC owl:deprecated true }} .
  FILTER NOT EXISTS { GRAPH ?yso { ?ysoC2 owl:deprecated true }} .
  
  OPTIONAL {?domainC ?directRelation ?ysoC} .
  BIND (IF(?ysoCinterface = ?ysoC, "kyllä" ,"ei") AS ?interface)
  BIND (IF(?ysoCinterface != ?ysoC, 
            "skos:broader+" ,
            IF(?directRelation = skos:broader ,
               "skos:broader",
               IF(?directRelation = skos:exactMatch,
                  "skos:exactMatch",
                  "skos:exactMatch/skos:broader" # Because ysoC is ysoCInterface, but ?directRelation is not skos:broader or skos:exactMatch
                  )
              )
          ) 
	   AS ?relationType).
  
  BIND(concat("'",?ysoCpref, "' (yso:",substr(str(?ysoC),28) ,") käsitteeltä on poistunut yläkäsite  '",?ysoC2pref,"' (yso:",substr(str(?ysoC2),28) ,") uudessa YSOssa") AS ?changeDescription)
  }
}
  
}UNION {

{
SELECT DISTINCT ?queryType ?querySubType ?domainC ?domainCtypes ?domainCpref ?relationType ?interface ?ysoC ?ysoCtypes ?ysoCpref ?changeDescription 
WHERE {
  {*domain-concept-selector-query*}
  
  # ?ysoCinterface YSO Concept that is directly connected to domain ontology (ie. equivalent or direct parent)
  ?domainC skos:broader|skos:exactMatch ?ysoCinterface .
  ?ysoCinterface rdf:type ?ysoCinterfaceType .
  ?ysoCinterfaceType rdf:type owl:Class .
  FILTER (strstarts(str(?ysoCinterfaceType),"http://www.yso.fi/onto/yso")) .

  {?ysoCinterface skos:broader* ?ysoC .
  ?ysoC skos:broader? ?ysoC2 .} .
  
  # do not report twice if concept is connected multiple ways, only direct change
  FILTER NOT EXISTS {?domainC skos:broader ?ysoC .
                     ?domainC skos:exactMatch ?ysoCinterface .
                     ?ysoCinterface skos:broader ?ysoC} 
  
  GRAPH ?yso { ?ysoC2 owl:deprecated true } .
				
  # do not report deprecated superordinate consepts for deprecated concepts
  FILTER(!(?ysoC != ?ysoC2 && EXISTS{   
             GRAPH ?yso { ?ysoC owl:deprecated true} 
         })) .
				
  #report deprecated concepts only through their superordinate concepts
  #unless the deprecated concept is directly connected
  FILTER(!(?ysoCinterface != ?ysoC && ?ysoC = ?ysoC2))
  
  {*yso-concept-selector-query*} 
  
  {?ysoC2 skos:prefLabel ?ysoC2pref .
  FILTER(lang(?ysoC2pref) = '*lang*')}
  
  
  OPTIONAL {?domainC ?directRelation ?ysoC} .
  BIND (IF(?ysoCinterface = ?ysoC, "kyllä" ,"ei") AS ?interface)
  BIND (IF(?ysoCinterface != ?ysoC, 
            "skos:broader+" ,
            IF(?directRelation = skos:broader ,
               "skos:broader",
               IF(?directRelation = skos:exactMatch,
                  "skos:exactMatch",
                  "skos:exactMatch/skos:broader" # Because ysoC is ysoCInterface, but ?directRelation is not skos:broader or skos:exactMatch
                  )
              )
          ) 
	   AS ?relationType).
  
  BIND(IF(?ysoCinterface = ?ysoC2, "3" , "3") AS ?queryType) .
  BIND(IF(?ysoCinterface = ?ysoC2, "4" , "3") AS ?querySubType) . 
  BIND(IF(?ysoCinterface = ?ysoC2,
          concat("'",?ysoCpref, "' (yso:",substr(str(?ysoC),28) ,") käsite on deprekoitu uudessa YSOssa"),
          concat("'",?ysoCpref, "' (yso:",substr(str(?ysoC),28) ,") käsitteellä on yläkäsite '",?ysoC2pref, "' (yso:",substr(str(?ysoC2),28) ,"), joka on deprekoitu uudessa YSOssa")
          ) AS ?changeDescription)
  
  } 
}
}

*count-domainC-subClasses-as-nroSubConcepts*

}ORDER BY ?domainC
  
  
]]></sparql>
</query>

</mutu-config>

